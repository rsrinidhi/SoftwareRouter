
/**********************************************************************
 * file:  sr_router.c 
 * date:  Mon Feb 18 12:50:42 PST 2002  
 * Contact: casado@stanford.edu 
 *
 * Description:
 * 
 * This file contains all the functions that interact directly
 * with the routing table, as well as the main entry method
 * for routing. 11
 * 90904102
 **********************************************************************/

#include <stdio.h>
#include <assert.h>

#include "sr_if.h"
#include "sr_rt.h"
#include "sr_router.h"
#include "sr_protocol.h"

/*--------------------------------------------------------------------- 
 * Method: sr_init(void)
 * Scope:  Global
 *
 * Initialize the routing subsystem
 * 
 *---------------------------------------------------------------------*/

void sr_init(struct sr_instance* sr) 
{
    /* REQUIRES */
    assert(sr);

    /* Add initialization code here! */
} /* -- sr_init -- */



/*---------------------------------------------------------------------
 * Method: sr_handlepacket(uint8_t* p,char* interface)
 * Scope:  Global
 *
 * This method is called each time the router receives a packet on the
 * interface.  The packet buffer, the packet length and the receiving
 * interface are passed in as parameters. The packet is complete with
 * ethernet headers.
 
 * Note: Both the packet buffer and the character's memory are handled
 * by sr_vns_comm.c that means do NOT delete either.  Make a copy of the
 * packet instead if you intend to keep it around beyond the scope of
 * the method call.
 *
 *---------------------------------------------------------------------*/

void sr_handlepacket(struct sr_instance* sr, uint8_t * packet/* lent */,
        unsigned int len,
        char* interface/* lent */)
{
    /* REQUIRES */
    assert(sr);
    assert(packet);
    assert(interface);

    printf("*** -> Received packet of length %d \n",len);
     
    struct sr_ethernet_hdr* e_hdr = 0;
    e_hdr = (struct sr_ethernet_hdr *)packet;
    
    if(e_hdr->ether_type == ntohs(ETHERTYPE_ARP))
	arp_packet(sr,packet,len,interface);

    //else
    //ip_packet(sr,packet,len,interface);

}/* end sr_ForwardPacket */

/*--------------------------------------------------------------------- 
 * Method:arp_packet(sr,packet,len,interface); 
 * Handling ARP packets
 *---------------------------------------------------------------------*/
 
  void arp_packet(struct sr_instance* sr,uint8_t * packet,unsigned int len,char* interface)
  {	
	struct sr_arphdr* a_hdr=(struct sr_arphdr*)(packet + sizeof(struct sr_ethernet_hdr));
	struct sr_if* iface = sr-> if_list;
	struct sr_ethernet_hdr* ethr_hd=(struct sr_ethernet_hdr *) packet;
	struct sr_arphdr* reply_ar_request=(struct sr_arphdr *)(packet + sizeof(struct sr_ethernet_hdr));
	
	uint8_t *pkt= malloc(sizeof(struct sr_arphdr *)+ sizeof(struct sr_ethernet_hdr));
	
//	if(len < sizeof(struct sr_arphdr *) + sizeof(struct sr_ethernet_hdr))
//	return 0;
	
//	if ((a_hdr->ar_op == ntohs(ARP_REQUEST))   && (a_hdr->ar_tip == iface->ip ) )	
	
		memcpy(ethr_hd->ether_dhost, ethr_hd->ether_shost, sizeof (ethr_hd->ether_dhost));
                memcpy(ethr_hd->ether_shost,sr->if_list->addr, sizeof (ethr_hd->ether_shost));
		ethr_hd->ether_type = htons (ETHERTYPE_ARP);
  
	//	uint32_t tmp = reply_ar_request->ar_tip;
       	//	reply_ar_request->ar_tip = reply_ar_request->ar_sip;
       	//	reply_ar_request->ar_sip = tmp; 

		reply_ar_request->ar_hrd= htons(ARPHDR_ETHER);
		reply_ar_request->ar_pro= htons(ETHERTYPE_IP);
		reply_ar_request->ar_hln= ETHER_ADDR_LEN;
		reply_ar_request->ar_pln= 4;
		reply_ar_request->ar_op= htons(ARP_REPLY);

		memcpy(reply_ar_request->ar_tha,ethr_hd->ether_shost, sizeof(ethr_hd->ether_shost));
		memcpy(reply_ar_request->ar_sha,sr_get_interface(sr,interface)->addr,sizeof(ethr_hd->ether_dhost));
		uint32_t tmp = reply_ar_request->ar_tip;
                reply_ar_request->ar_tip = reply_ar_request->ar_sip;
                reply_ar_request->ar_sip = tmp; 
	
		sr_send_packet(sr,pkt,len,interface);


  }


/*--------------------------------------------------------------------- 
 * Method:
 *
 *---------------------------------------------------------------------*/
